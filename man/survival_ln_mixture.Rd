% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/survival_ln_mixture-fit.R
\name{survival_ln_mixture}
\alias{survival_ln_mixture}
\alias{survival_ln_mixture.default}
\alias{survival_ln_mixture.formula}
\title{Lognormal mixture model}
\usage{
survival_ln_mixture(
  formula,
  data,
  intercept = TRUE,
  iter = 1000,
  warmup = floor(iter/10),
  thin = 1,
  chains = 1,
  cores = 1,
  numero_componentes = 2,
  proposal_variance = 2,
  show_progress = FALSE,
  em_iter = 150,
  starting_seed = sample(1, 2^28, 1),
  ...
)

\method{survival_ln_mixture}{default}(formula, ...)

\method{survival_ln_mixture}{formula}(formula, data, intercept = TRUE, ...)
}
\arguments{
\item{formula}{A formula specifying the outcome terms on the left-hand side,
and the predictor terms on the right-hand side. The outcome must be a \link[survival:Surv]{survival::Surv}
object.}

\item{data}{A \strong{data frame} containing both the predictors and the outcome.}

\item{intercept}{A logical. Should an intercept be included in the processed data?}

\item{iter}{A positive integer specifying the number of iterations for each chain (including warmup).}

\item{warmup}{A positive integer specifying the number of warmup (aka burnin) iterations per chain.
The number of warmup iterations should be smaller than iter.}

\item{thin}{A positive integer specifying the period for saving samples.}

\item{chains}{A positive integer specifying the number of Markov chains.}

\item{cores}{A positive integer specifying the maximum number of cores to run the chains. If cores == 1, the chains will run sequentially on one core each. If cores > 1, each chain will run in each core. For example, if chains = 6 and cores = 4, the first 4 chains will run with the 4 cores (one core each) and after that, 2 chains are going to run using 2 cores. If the number of cores is bigger than the number of chains, the excess will be ignored and the number of cores used will be the number of chains specified.}

\item{numero_componentes}{number of mixture componentes >= 2.}

\item{proposal_variance}{The value used at the distribution for e0, hyperparameter of the Dirichlet prior, has the form of Gamma(proposal_variance, proposal_variance*G). It affects how distant the proposal values will be from the actual value. Large values of the proposal_variance may be problematic, since the hyperparameter e0 is sampled using a Metropolis-Hasting algorithm and may take long to converge. The code is implemented so the initial value of proposal_variance does not affect the convergence too much, since it's changed through the iterations to sintonize the variance, ensuring an acceptance ratio of proposal values between 17\% and 25\%, which seems to be optimal on our tests.}

\item{show_progress}{Indicates if the code shows the progress of the EM algorithm and the Gibbs Sampler.}

\item{em_iter}{A positive integer specifying the number of iterations for the EM algorithm. The EM algorithm is performed before the Gibbs sampler to find better initial values for the chains. On simulations, values lower than 200 seems to work nice.}

\item{starting_seed}{Starting seed for the sampler. If not specified by the user, uses a random integer between 1 and 2^28 This way we ensure, when the user sets a seed in R, that this is passed into the C++ code.}

\item{...}{Not currently used, but required for extensibility.}
}
\value{
A \code{survival_ln_mixture} object, which is a list with the following componentes:

\item{posterior}{A \link[posterior:draws_matrix]{posterior::draws_matrix} with the posterior of the parameters of the model.}
\item{nobs}{A integer holding the number of observations used to generate the fit.}
\item{blueprint}{The blueprint component of the output of \link[hardhat:mold]{hardhat::mold}}
}
\description{
\code{survival_ln_mixture()} fits a lognormal mixture model, as described in (referencia artigo viviana).
Colocar mais detalhes sobre o modelo (como a equacao) em details.
}
\note{
Categorical predictors must be converted to factors before the fit,
otherwise the predictions will fail.
}
\examples{

# Formula interface
library(survival)
set.seed(1)
mod <- survival_ln_mixture(Surv(time, status == 2) ~ NULL, lung, intercept = TRUE)

}
